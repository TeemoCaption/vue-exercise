{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Job Details Page\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createCommentVNode(\"\\r\\n            $route：Vue Router 注入到每個 Vue 實例中的一個對象，它包含當前路由資訊，如路徑、查詢參數、路由參數等。\\r\\n            $route：對象中的一個屬性，它是一個對象，包含當前路由的所有動態片段和全匹配片段。 \\r\\n            params：對象中的一個屬性，其名稱應與路由配置中定義的參數名相匹配。例如，如果有一條路由定義為 /user/:id，那麼 :id 就是一個動態路由參數，可以通過 $route.params.id 訪問它的值。\\r\\n        \"), _createElementVNode(\"p\", null, \"The job id is \" + _toDisplayString($props.id), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($data.job), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_Fragment","_hoisted_1","_createCommentVNode","_toDisplayString","$props","id","$data","job"],"sources":["D:\\承諺\\個人\\學習\\程式\\Vue.js\\vue-exercise\\edward-jobs\\src\\views\\jobs\\JobDetails.vue"],"sourcesContent":["<template>\r\n    <h1>Job Details Page</h1>\r\n    <!--\r\n            $route：Vue Router 注入到每個 Vue 實例中的一個對象，它包含當前路由資訊，如路徑、查詢參數、路由參數等。\r\n            $route：對象中的一個屬性，它是一個對象，包含當前路由的所有動態片段和全匹配片段。 \r\n            params：對象中的一個屬性，其名稱應與路由配置中定義的參數名相匹配。例如，如果有一條路由定義為 /user/:id，那麼 :id 就是一個動態路由參數，可以通過 $route.params.id 訪問它的值。\r\n        -->\r\n    <p>The job id is {{ id }}</p>\r\n    <p>{{ job }}</p>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    props: ['id'],\r\n    data(){\r\n        return {\r\n            job: null,\r\n        }\r\n    },\r\n    // 當組件完成了所有的初始化工作，並把處理好的 HTML 插入到頁面上相應的位置後，mounted() 生命週期鉤子就會被調用，mounted() 常常用來執行那些需要訪問或操作 DOM 的任務，只有在這個階段，組件的 DOM 結構才已經形成\r\n    mounted(){\r\n        // 使用 fetch API 向本地伺服器的 '/jobs' 端點發送 GET 請求\r\n        fetch('http://localhost:3000/jobs/' + this.id)\r\n            .then((res)=> res.json())  // 得到響應後，將響應體（Response Body）解析為 JSON 格式\r\n            .then(data => this.job = data)  // 將解析後的 JSON 數據（即 'jobs' 數據）賦值給組件的 'jobs' 屬性\r\n            .catch(err => console.log(err.message))\r\n        }   \r\n}\r\n</script>\r\n\r\n<style></style>"],"mappings":";gCACIA,mBAAA,CAAyB,YAArB,kBAAgB;;uBADxBC,mBAAA,CAAAC,SAAA,SACIC,UAAyB,EACzBC,mBAAA,oRAIO,EACPJ,mBAAA,CAA6B,WAA1B,gBAAc,GAAAK,gBAAA,CAAGC,MAAA,CAAAC,EAAE,kBACtBP,mBAAA,CAAgB,WAAAK,gBAAA,CAAVG,KAAA,CAAAC,GAAG,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}