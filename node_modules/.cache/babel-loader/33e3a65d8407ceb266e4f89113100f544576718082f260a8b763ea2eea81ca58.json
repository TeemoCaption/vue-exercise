{"ast":null,"code":"export default {\n  props: ['delay'],\n  data() {\n    return {\n      showBlock: false,\n      timer: null,\n      recationTime: 0\n    };\n  },\n  // 當組件完成了所有的初始化工作，並把處理好的 HTML 插入到頁面上相應的位置後，mounted() 生命週期鉤子就會被調用，mounted() 常常用來執行那些需要訪問或操作 DOM 的任務，只有在這個階段，組件的 DOM 結構才已經形成\n  mounted() {\n    console.log('component mounted');\n    setTimeout(() => {\n      this.showBlock = true;\n      this.startTimer();\n      //console.log(this.delay);\n    }, this.delay);\n  },\n  methods: {\n    startTimer() {\n      this.timer = setInterval(() => {\n        // 設定每10毫秒執行一次\n        this.recationTime += 10;\n      }, 10);\n    },\n    stopTimer() {\n      clearInterval(this.timer); // 清除計時器\n      //console.log(this.recationTime);\n      // $emit 用於觸發（emit）一個事件。這個方法主要用於子組件，以便通知其父組件某件事情已經發生。第二個參數是要傳遞的數據\n      this.$emit('end', this.recationTime);\n    }\n  },\n  // updated() 是一個生命週期鉤子，當組件的數據發生變更，並且重新渲染 DOM 之後被調用。\n  updated() {\n    console.log('component updated');\n  },\n  unmounted() {\n    // unmounted() 是生命週期鉤子之一，在組件被從 DOM 中移除後調用，確保在組件消失時，與之相關的所有資源都能被適當地清理，以避免內存不足。\n    console.log('unmounted');\n  }\n};","map":{"version":3,"names":["props","data","showBlock","timer","recationTime","mounted","console","log","setTimeout","startTimer","delay","methods","setInterval","stopTimer","clearInterval","$emit","updated","unmounted"],"sources":["D:\\承諺\\個人\\學習\\程式\\Vue.js\\vue-exercise\\reaction-timer\\src\\components\\Block.vue"],"sourcesContent":["<template>\n    <div class=\"block\" v-if=\"showBlock\" @click=\"stopTimer\">\n        click me\n    </div>\n</template>\n\n<script>\nexport default {\n    props: ['delay'],\n    data(){\n        return {\n            showBlock: false,\n            timer: null,\n            recationTime: 0,\n        }\n    },\n    // 當組件完成了所有的初始化工作，並把處理好的 HTML 插入到頁面上相應的位置後，mounted() 生命週期鉤子就會被調用，mounted() 常常用來執行那些需要訪問或操作 DOM 的任務，只有在這個階段，組件的 DOM 結構才已經形成\n    mounted(){  \n        console.log('component mounted');\n        setTimeout(() => {\n            this.showBlock = true;\n            this.startTimer();\n            //console.log(this.delay);\n        },this.delay);\n    },  \n    methods: {\n        startTimer(){\n            this.timer = setInterval(() =>{  // 設定每10毫秒執行一次\n                this.recationTime += 10;\n            }, 10);\n        },\n        stopTimer(){\n            clearInterval(this.timer);  // 清除計時器\n            //console.log(this.recationTime);\n            // $emit 用於觸發（emit）一個事件。這個方法主要用於子組件，以便通知其父組件某件事情已經發生。第二個參數是要傳遞的數據\n            this.$emit('end',this.recationTime);  \n        }\n    },  \n    // updated() 是一個生命週期鉤子，當組件的數據發生變更，並且重新渲染 DOM 之後被調用。\n    updated(){\n        console.log('component updated');\n    },\n    unmounted(){  // unmounted() 是生命週期鉤子之一，在組件被從 DOM 中移除後調用，確保在組件消失時，與之相關的所有資源都能被適當地清理，以避免內存不足。\n        console.log('unmounted');\n    },\n}\n</script>\n\n<style>\n.block {\n    width: 400px;\n    border-radius: 20px;\n    background:  #0faf87;;\n    color: white;\n    text-align: center;\n    padding: 100px 0;\n    margin: 40px auto;\n  }\n</style>"],"mappings":"AAOA,eAAe;EACXA,KAAK,EAAE,CAAC,OAAO,CAAC;EAChBC,IAAIA,CAAA,EAAE;IACF,OAAO;MACHC,SAAS,EAAE,KAAK;MAChBC,KAAK,EAAE,IAAI;MACXC,YAAY,EAAE;IAClB;EACJ,CAAC;EACD;EACAC,OAAOA,CAAA,EAAE;IACLC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;IAChCC,UAAU,CAAC,MAAM;MACb,IAAI,CAACN,SAAQ,GAAI,IAAI;MACrB,IAAI,CAACO,UAAU,CAAC,CAAC;MACjB;IACJ,CAAC,EAAC,IAAI,CAACC,KAAK,CAAC;EACjB,CAAC;EACDC,OAAO,EAAE;IACLF,UAAUA,CAAA,EAAE;MACR,IAAI,CAACN,KAAI,GAAIS,WAAW,CAAC,MAAK;QAAG;QAC7B,IAAI,CAACR,YAAW,IAAK,EAAE;MAC3B,CAAC,EAAE,EAAE,CAAC;IACV,CAAC;IACDS,SAASA,CAAA,EAAE;MACPC,aAAa,CAAC,IAAI,CAACX,KAAK,CAAC,EAAG;MAC5B;MACA;MACA,IAAI,CAACY,KAAK,CAAC,KAAK,EAAC,IAAI,CAACX,YAAY,CAAC;IACvC;EACJ,CAAC;EACD;EACAY,OAAOA,CAAA,EAAE;IACLV,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;EACpC,CAAC;EACDU,SAASA,CAAA,EAAE;IAAG;IACVX,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;EAC5B;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}